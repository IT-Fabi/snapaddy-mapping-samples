{
  "integrations": {
    "salesforce": {
      "duplicateCheck": {
        "pipeline": {
          "stages": [
            {
              "tasks": [
                {
                  "entity": "lead",
                  "tree": {
                    "operator": "and",
                    "subconditions": [
                      {
                        "field": "IsConverted",
                        "operator": "eq",
                        "value": false,
                        "optional": true
                      },
                      {
                        "operator": "or",
                        "subconditions": [
                          {
                            "field": "Email",
                            "operator": "eq",
                            "value": "{{ address.email }}",
                            "filters": [
                              "return !isEmailGeneric(address.email)"
                            ]
                          },
                          {
                            "operator": "and",
                            "subconditions": [
                              {
                                "field": "FirstName",
                                "operator": "allIn",
                                "value": "{{ address.firstName }}"
                              },
                              {
                                "field": "LastName",
                                "operator": "allIn",
                                "value": "{{ address.lastName }}"
                              },
                              {
                                "field": "Company",
                                "operator": "allIn",
                                "value": "{{ address.organization }}"
                              }
                            ],
                            "filters": [
                              "return (address.firstName.length >= 3 || address.lastName.length >= 3) && address.organization.length >= 3"
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "missingDataLabel": "NO_EMAIL_OR_NAME_AND_COMPANY_ENTERED"
                },
                {
                  "entity": "contact",
                  "tree": {
                    "operator": "or",
                    "subconditions": [
                      {
                        "field": "Email",
                        "operator": "eq",
                        "value": "{{ address.email }}",
                        "filters": [
                          "return !isEmailGeneric(address.email)"
                        ]
                      },
                      {
                        "operator": "and",
                        "subconditions": [
                          {
                            "field": "FirstName",
                            "operator": "allIn",
                            "value": "{{ address.firstName }}"
                          },
                          {
                            "field": "LastName",
                            "operator": "allIn",
                            "value": "{{ address.lastName }}"
                          }
                        ],
                        "filters": [
                          "return (address.firstName.length >= 3 || address.lastName.length >= 3)"
                        ]
                      }
                    ]
                  },
                  "missingDataLabel": "NO_EMAIL_OR_NAME_ENTERED"
                },
                {
                  "entity": "account",
                  "tree": {
                    "operator": "OR",
                    "subconditions": [
                      {
                        "field": "Website",
                        "operator": "in",
                        "value": "{{ getDomainFromURL(address.website) }}",
                        "filters": [
                          "return address.website.length > 5"
                        ]
                      },
                      {
                        "field": "Name",
                        "operator": "allIn",
                        "value": "{{ address.organization }}",
                        "filters": [
                          "return address.organization.length >= 3"
                        ]
                      },
                      {
                        "operator": "AND",
                        "subconditions": [
                          {
                            "field": "Name",
                            "operator": "allIn",
                            "value": "{{ address.organization }}"
                          },
                          {
                            "operator": "OR",
                            "subconditions": [
                              {
                                "field": "BillingPostalCode",
                                "operator": "in",
                                "value": "{{ address.zip }}"
                              },
                              {
                                "field": "BillingCity",
                                "operator": "in",
                                "value": "{{ address.city }}"
                              }
                            ]
                          }
                        ],
                        "filters": [
                          "return address.organization.length >= 3 && (!!address.zip || !!address.city)"
                        ]
                      }
                    ]
                  },
                  "missingDataLabel": "NO_WEBSITE_OR_NAME_ENTERED"
                }
              ],
              "results": [],
              "post": [
                [
                  "var sorted = pipeline.stages[0].results[0].duplicates;",
                  "for (var i = 0; i < sorted.length; i++) {",
                  "  var e = sorted[i] || {};",
                  "  e._sortKey = 0;",
                  "",
                  "  var duplicateFirstName = (e.FirstName || '').trim()",
                  "  var duplicateLastName = (e.LastName || '').trim()",
                  "  var duplicateEmail = (e.Email || '').trim()",
                  "  var duplicateCompanyName = (e.CompanyName || '').trim()",
                  "",
                  "  var snapADDYFirstName = (address.firstName || '').trim()",
                  "  var snapADDYLastName = (address.lastName || '').trim()",
                  "  var snapADDYEmail = (address.email || '').trim()",
                  "  var snapADDYCompanyName = (address.organization || '').trim()",
                  "",
                  "  // FirstName exact match ",
                  "  if (duplicateFirstName.toLowerCase() === snapADDYFirstName.toLowerCase()) {",
                  "    e._sortKey += 2;",
                  "  }",
                  "",
                  "  // LastName exact match ",
                  "  if (duplicateLastName.toLowerCase() === snapADDYLastName.toLowerCase()) {",
                  "    e._sortKey += 2;",
                  "  }",
                  "",
                  "  // Email exact match ",
                  "  if (duplicateEmail.toLowerCase() === snapADDYEmail.toLowerCase()) {",
                  "    e._sortKey++;",
                  "  }",
                  "",
                  "  // Company exact match ",
                  "  if (duplicateCompanyName.toLowerCase() === snapADDYCompanyName.toLowerCase()) {",
                  "    e._sortKey += 2;",
                  "  }",
                  "",
                  "  // Company includes match ",
                  "  if (duplicateCompanyName.toLowerCase().indexOf(snapADDYCompanyName.toLowerCase()) > -1) {",
                  "    e._sortKey++;",
                  "  }",
                  "}",
                  "",
                  "sorted = sortByKey(sorted, '_sortKey', 'DESC');",
                  "",
                  "pipeline.stages[0].results[0].duplicates = sorted;",
                  "pipeline.stages[0].results[0].suggested = sorted[0];",
                  "return pipeline;"
                ],
                [
                  "var sorted = pipeline.stages[0].results[1].duplicates;",
                  "for (var i = 0; i < sorted.length; i++) {",
                  "  var e = sorted[i] || {};",
                  "  e._sortKey = 0",
                  "",
                  "  var duplicateFirstName = (e.FirstName || '').trim()",
                  "  var duplicateLastName = (e.LastName || '').trim()",
                  "  var duplicateEmail = (e.Email || '').trim()",
                  "",
                  "  var snapADDYFirstName = (address.firstName || '').trim()",
                  "  var snapADDYLastName = (address.lastName || '').trim()",
                  "  var snapADDYEmail = (address.email || '').trim()",
                  "",
                  "  // FirstName exact match ",
                  "  if (duplicateFirstName.toLowerCase() === snapADDYFirstName.toLowerCase()) {",
                  "    e._sortKey += 2;",
                  "  }",
                  "",
                  "  // LastName exact match ",
                  "  if (duplicateLastName.toLowerCase() === snapADDYLastName.toLowerCase()) {",
                  "    e._sortKey += 2;",
                  "  }",
                  "",
                  "  // Company exact match ",
                  "  if (duplicateEmail.toLowerCase() === snapADDYEmail.toLowerCase()) {",
                  "    e._sortKey += 2;",
                  "  }",
                  "}",
                  "",
                  "sorted = sortByKey(sorted, '_sortKey', 'DESC');",
                  "",
                  "pipeline.stages[0].results[1].duplicates = sorted;",
                  "pipeline.stages[0].results[1].suggested = sorted[0];",
                  "return pipeline;"
                ],
                [
                  "var sorted = pipeline.stages[0].results[2].duplicates;",
                  "for (var i = 0; i < sorted.length; i++) {",
                  "  var e = sorted[i];",
                  "  e._sortKey = 0",
                  "",
                  "  var duplicateCompanyName = (e.Name || '').trim()",
                  "  var duplicateWebsite = (e.Website || '').trim()",
                  "  var duplicateZip = (e.BillingPostalCode || '').trim()",
                  "  var duplicateCity = (e.BillingCity || '').trim()",
                  "",
                  "  var snapADDYCompanyName = (address.organization || '').trim()",
                  "  var snapADDYWebsite = (address.website || '').trim()",
                  "  var snapADDYZip = (address.zip || '').trim()",
                  "  var snapADDYCity = (address.city || '').trim()",
                  "",
                  "  // Company exact match ",
                  "  if (duplicateCompanyName.toLowerCase() === snapADDYCompanyName.toLowerCase()) {",
                  "    e._sort_key += 2",
                  "  }",
                  "",
                  "  // Company includes match ",
                  "  if (duplicateCompanyName.toLowerCase().indexOf(snapADDYCompanyName.toLowerCase()) > -1) {",
                  "    e._sort_key++",
                  "  }",
                  "",
                  "  // Website exact match ",
                  "  if (duplicateWebsite.toLowerCase() === snapADDYWebsite.toLowerCase()) {",
                  "    e._sort_key += 2",
                  "  }",
                  "",
                  "  // Website includes match ",
                  "  if (duplicateWebsite.toLowerCase().indexOf(snapADDYWebsite.toLowerCase()) > -1) {",
                  "    e._sort_key++",
                  "  }",
                  "",
                  "  // ZIP match ",
                  "  if (duplicateZip === snapADDYZip) {",
                  "    e._sortKey += 2;",
                  "  }",
                  "",
                  "  // City match ",
                  "  if (duplicateCity === snapADDYCity) {",
                  "    e._sortKey += 2;",
                  "  }",
                  "}",
                  "",
                  "sorted = sortByKey(sorted, '_sortKey', 'DESC');",
                  "",
                  "pipeline.stages[0].results[2].duplicates = sorted;",
                  "pipeline.stages[0].results[2].suggested = sorted[0];",
                  "return pipeline;"
                ]
              ]
            }
          ],
          "mapResults": [
            "return {",
            "  lead: pipeline.stages[0].results[0],",
            "  contact: pipeline.stages[0].results[1],",
            "  account: pipeline.stages[0].results[2],",
            "}"
          ]
        }
      }
    }
  }
}